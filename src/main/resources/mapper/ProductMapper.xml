<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fn.dao.mapper.ProductMapper">
  <resultMap id="BaseResultMap" type="com.fn.model.Product">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="price" jdbcType="REAL" property="price" />
    <result column="cid" jdbcType="INTEGER" property="cid" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, price, cid
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from product_
    where id = #{id,jdbcType=INTEGER}
  </select>

  <!--  提供Product.xml，通过listProduct配置关联查询的sql语句。
    然后通过resultMap ，进行字段和属性的对应。
    使用association 进行多对一关系关联，指定表字段名称与对象属性名称的一一对应关系
    注： Category的id 字段 和Product的id字段同名，Mybatis不知道谁是谁的，所以需要通过取别名cid,pid来区分。
    name字段同理。-->
  <resultMap type="com.fn.model.Product" id="productBean">
    <id column="pid" property="id" />
    <result column="pname" property="name" />
    <result column="price" property="price" />
    <!-- 多对一的关系 -->
    <!-- property: 指的是属性名称, javaType：指的是属性的类型 -->
    <association property="category" javaType="com.fn.model.Category">
      <id column="cid" property="id"/>
      <result column="cname" property="name"/>
    </association>
  </resultMap>
  <!-- 根据id查询Product, 关联将Orders查询出来 -->
  <select id="listProduct" resultMap="productBean">
      select c.*, p.*, c.id 'cid', p.id 'pid', c.name 'cname', p.name 'pname' from category_ c left join product_ p on c.id = p.cid
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from product_
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.fn.model.Product">
    insert into product_ (id, name, price, 
      cid)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{price,jdbcType=REAL}, 
      #{cid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.fn.model.Product">
    insert into product_
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="cid != null">
        cid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=REAL},
      </if>
      <if test="cid != null">
        #{cid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.fn.model.Product">
    update product_
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=REAL},
      </if>
      <if test="cid != null">
        cid = #{cid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fn.model.Product">
    update product_
    set name = #{name,jdbcType=VARCHAR},
      price = #{price,jdbcType=REAL},
      cid = #{cid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>